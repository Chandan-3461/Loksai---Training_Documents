

#######################
Day 11 : 19th Dec. 2024
#######################	

1. Overview of Various Build Tools
2. What is Maven
3. Maven Architecture
4. Maven Plugins
5. Maven Archetypes
6. Maven Commands
7. Integration of Jacoco Plugin for Code Coverage
8. Overview of Maven Applications


	Prepared the Application Source Repository 
	
	
	
	- Automate Build the Source Code 		
			# Is a process of Compiling the Source Code and Creating Artifacts(Binaries/Executables - *.exec/*.dll/*.jar/*.war) 


	Java Springboot Web Application
	
		SRC_CODE Folder 
		
			*.java Programs 
			
				compile
				
				create the artifacts 
				
				perform Unit Testing 
				
				
	Environments :
	
		Non-Prod Environments														Production Environment (LIVE)
		
			Dev Environment	(VM)
				- Unit Test
			Build Environment (VM)
				- Unit Test
				
			Testing Environment (VM)
			
				- QA (VM) - Quality Assurance Testing 
				
				- UAT (VM) - User Acceptace Testing				==============>				Production Servers (VM)

	
	
	Build Tools :
	
		What is Maven Tool ?

			- Is an Java based Application Build Tool.
			- Using Maven, we can perform :
						- Code Compilation
						- Automate Unit Testing 
						- Create Artifacts 
						
		Build Tool :
		
			Maven/Gradle/Ant
			
			
		java compiler :
			
				javac 
				
	Dev Environment:	
		
		Developers' Workflow ::

			1. Create Program : *.java 
			
			2. Compile 
			
			3. Create artifacts 
			
			4. Test the program - Unit Testing using Unit Testing Tool like JUnit
			
			5. Push the Changes to Remote github repository 
			
			Tools required to perform these activities :::
			
			Tools :::
			
				- Eclipse based IDEs - like Eclipse for Java,Pycharm,Intellij, Visual Studio, Visual Studio Code
				- Source Code Management Tool - like github/AWS Code Commit/Azure Repos 
				- Jdk, Maven, JUnit Testing Tool, git  
		

	Build Environment:

		Using DevOps Approach ::
		Automate ::

		- Identify/Clone the Source Code from Github Repository 		
		- Build the code - Compile and create artifacts 					
		- Unit Testing 			
		- Verify the Unit Test Coverage 
		- Archive the Artifacts in the Artifactory Library (Like Jfrog)
		- Promote the Application to higher testing Environment(QA)					
		- Notify the Testing/Development Team 	
		
		
	Source Code Repository 
	
		payment.java_v1.0(github)	-->  Unit Test 	--> payment.war_v1.0(Artifactory Library-jfrog) 
		payment.java_v1.1(github)	-->  Unit Test 	--> payment.war_v1.1(Artifactory Library-jfrog) 
		

	How to Perform Application Build, Unit Testing ?
	
		- Using Maven Build Tool 
			- Maven is Java Application Build Tool
			- Maven is used to Compile the Source Code 
			- Create Artifacts 
			- Perform Unit Testing
				(Unit Testing is a process of testing the changes done by the developers)
			- Maven can verify the Code Coverage 
			
			
		Application Build Process :
		
			Input 	: Source Code 	-	*.java  (github repositories)
			
			Output 	: Artifacts 	- 	*.war 	(Artifactory Libraries)
			
		Maven - Build Tool
		
		How Maven Works ??		
		
		Application Source Code Repository :
		
			Developer create POM.XML File to perform Maven Build
								
		Build Tools - Maven - used to build Java applications 
		
		Using Maven : 
			Application Build - Compile the code, create artifacts, perform unit-testing 


			Java Web Application Project : - 

			My_Web_App - Folder 
			
			Maven Project Structure :::			# Java Maven Desktop/Console/terminal Application;

			MVN_Project1				# Project Name 
				src 
					main			# Maintain the source code *.java - Business Logic 
						*.java
					test			# Maintain the Test Cases and Test Data - JUnit 
						*.java
				target
					artifacts *.war / *.jar
				pom.xml 			==> defines the application artifacts, plugins and all the required depedencies

				JRE_Libraries
				MVN_Libraries	


		Maven Project :
		
			pom.xml - Project Object Model :
			
				- Will be part of the Java Application Project - Source Code Repository
				- It is used to define the properties of application artifacts 
				- It is used to define dependencies and the plugins required to perform build/unit-testing
	
			Maven Repository :		https://mvnrepository.com/
			
				- Maven Repositories Contains the Maven Dependencies and Plugins 
				- During Build, Maven refer to this Repositories and Download the Dependencies to perform Application Build, Unit Testing etc...
				
				Eg.: 
				Build Environment (VM) :::

					Build the application	--> Jdk, Maven 
					
					Unit Testing - Junit Testing Tool 
	
			Maven Goals : 
				This defines the actions we perform using Maven 
			
				● mvn compile 	- to compile the source code
				● mvn test 		- to compile and execute junit test cases
				● mvn package 	- to compile, test and create artifacts in the target folder of Project Library
				● mvn clean 	- to clean the target folder.

				Eg.: 
				
				mvn clean package   - first it cleans target folder and then compiles, test and create artifacts in the target folder of Project Library.
				
				
			Code Coverage :::
			
			JaCoCo	- Java Code Coverage 
				- Is used validate the Code Coverage :
				
					- 100% Code changes are covered during Unit Test.
